function Screen.init 1
push constant 0
not
pop static 0
push constant 16
call Array.new 1
pop static 1
push constant 0
push static 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
push local 0
push constant 1
sub
push static 1
add
pop pointer 1
push that 0
push local 0
push constant 1
sub
push static 1
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 17
call Array.new 1
pop static 2
push constant 17
call Array.new 1
pop static 3
push constant 1
pop local 0
label WHILE_EXP1
push local 0
push constant 17
lt
not
if-goto WHILE_END1
push local 0
push static 2
add
push local 0
push constant 1
sub
push static 2
add
pop pointer 1
push that 0
push local 0
push constant 1
sub
push static 1
add
pop pointer 1
push that 0
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push static 3
add
push local 0
push constant 1
sub
push static 3
add
pop pointer 1
push that 0
push constant 16
push local 0
sub
push static 1
add
pop pointer 1
push that 0
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
push static 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push static 3
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.clearScreen 1
push constant 16384
pop local 0
label WHILE_EXP0
push local 0
push constant 24575
lt
not
if-goto WHILE_END0
push local 0
push constant 0
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 2
push argument 0
push constant 16
call Screen.mod 2
pop local 0
push argument 0
push argument 1
call Screen.pos2addr 2
pop local 1
push local 1
push local 0
push static 1
add
pop pointer 1
push that 0
call Screen.setVal 2
pop temp 0
push constant 0
return
function Screen.drawLine 0
push argument 0
push argument 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push argument 1
push argument 3
call Screen.drawVertical 3
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 1
push argument 3
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontal 3
pop temp 0
push constant 0
return
label IF_FALSE1
push argument 0
push argument 1
push argument 2
push argument 3
call Screen.drawSlope 4
pop temp 0
push constant 0
return
function Screen.drawVertical 6
push argument 1
push argument 2
call Math.min 2
pop local 1
push argument 1
push argument 2
call Math.max 2
pop local 2
push argument 0
push local 1
call Screen.pos2addr 2
pop local 0
push local 2
push local 1
sub
push constant 1
add
pop local 4
push argument 0
push constant 16
call Screen.mod 2
pop local 5
push constant 0
pop local 3
label WHILE_EXP0
push local 3
push local 4
lt
not
if-goto WHILE_END0
push local 0
push local 5
push static 1
add
pop pointer 1
push that 0
call Screen.setVal 2
pop temp 0
push local 3
push constant 1
add
pop local 3
push local 0
push constant 32
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawHorizontal 0
push argument 0
push argument 2
push argument 1
push argument 2
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Screen.segmentVal 2
push argument 0
push constant 16
call Screen.mod 2
push constant 0
call Math.max 2
pop local 1
push argument 1
push local 1
add
push static 2
add
pop pointer 1
push that 0
pop local 0
push local 0
push local 1
push static 2
add
pop pointer 1
push that 0
not
and
return
function Screen.drawSlope 6
push argument 0
push argument 2
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
pop local 2
push argument 1
pop local 3
push argument 2
push argument 0
sub
pop local 4
push argument 3
push argument 1
sub
pop local 5
goto IF_END0
label IF_FALSE0
push argument 2
pop local 2
push argument 3
pop local 3
push argument 0
push argument 2
sub
pop local 4
push argument 1
push argument 3
sub
pop local 5
label IF_END0
push constant 0
pop local 0
push constant 0
pop local 1
push local 5
push constant 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
label WHILE_EXP0
push local 0
push local 4
gt
not
push local 1
push local 5
gt
not
and
not
if-goto WHILE_END0
push local 2
push local 0
add
push local 3
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 1
push local 4
call Math.multiply 2
push local 0
push local 5
call Math.multiply 2
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push constant 1
add
pop local 0
goto IF_END2
label IF_FALSE2
push local 1
push constant 1
add
pop local 1
label IF_END2
goto WHILE_EXP0
label WHILE_END0
goto IF_END1
label IF_FALSE1
label WHILE_EXP1
push local 0
push local 4
gt
not
push local 1
push local 5
lt
not
and
not
if-goto WHILE_END1
push local 2
push local 0
add
push local 3
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 1
push local 4
call Math.multiply 2
push local 0
push local 5
call Math.multiply 2
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 1
push constant 1
sub
pop local 1
goto IF_END3
label IF_FALSE3
push local 0
push constant 1
add
pop local 0
label IF_END3
goto WHILE_EXP1
label WHILE_END1
label IF_END1
push constant 0
return
function Screen.drawRectangle 10
push argument 0
push argument 2
call Math.min 2
pop local 0
push argument 0
push argument 2
call Math.max 2
pop local 1
push argument 1
push argument 3
call Math.min 2
pop local 2
push argument 1
push argument 3
call Math.max 2
pop local 3
push local 0
push constant 16
add
push local 0
push constant 16
call Screen.mod 2
sub
pop local 8
push local 1
push local 8
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 1
push local 0
sub
push constant 1
add
call Screen.segmentVal 2
pop local 6
push local 0
push local 2
call Screen.pos2addr 2
pop local 7
label WHILE_EXP0
push local 2
push local 3
gt
not
not
if-goto WHILE_END0
push local 7
push local 6
call Screen.setVal 2
pop temp 0
push local 7
push constant 32
add
pop local 7
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
label IF_FALSE0
push local 0
push local 2
push local 1
push local 3
call Screen.drawLeftRectangle 4
pop temp 0
push local 0
push local 2
push local 1
push local 3
call Screen.drawMiddleRectangle 4
pop temp 0
push local 0
push local 2
push local 1
push local 3
call Screen.drawrightRectangle 4
pop temp 0
push constant 0
return
function Screen.drawLeftRectangle 13
push argument 0
pop local 9
push argument 2
pop local 10
push argument 1
pop local 11
push argument 3
pop local 12
push local 9
push constant 16
call Screen.mod 2
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
goto IF_END0
label IF_FALSE0
push local 9
push constant 16
push local 9
push constant 16
call Screen.mod 2
sub
add
pop local 0
label IF_END0
push local 9
push local 9
push constant 16
call Screen.mod 2
sub
pop local 1
push local 1
push constant 16
call Math.divide 2
pop local 6
push constant 32
push local 11
call Math.multiply 2
pop local 5
push local 0
push local 9
sub
pop local 2
push local 11
pop local 3
push local 12
push local 11
sub
push constant 1
add
pop local 4
label WHILE_EXP0
push local 3
push local 12
gt
not
not
if-goto WHILE_END0
push constant 16384
push local 5
add
push local 6
add
pop local 8
push local 8
call Memory.peek 1
pop local 7
push static 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 8
push local 7
push local 2
push static 3
add
pop pointer 1
push that 0
or
call Memory.poke 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 8
push local 7
push local 2
push static 3
add
pop pointer 1
push that 0
not
and
call Memory.poke 2
pop temp 0
label IF_END1
push local 5
push constant 32
add
pop local 5
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawMiddleRectangle 8
push argument 0
push constant 16
call Screen.mod 2
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
pop local 0
goto IF_END0
label IF_FALSE0
push argument 0
push constant 16
push argument 0
push constant 16
call Screen.mod 2
sub
add
pop local 0
label IF_END0
push argument 2
push constant 16
call Screen.mod 2
push constant 15
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 2
pop local 1
goto IF_END1
label IF_FALSE1
push argument 2
push argument 2
push constant 16
call Screen.mod 2
push constant 1
add
sub
pop local 1
label IF_END1
push local 1
push local 0
sub
push constant 1
add
push constant 16
call Math.divide 2
pop local 2
push argument 1
push constant 32
call Math.multiply 2
pop local 5
push local 0
push constant 16
call Math.divide 2
pop local 6
push argument 1
pop local 3
label WHILE_EXP0
push local 3
push argument 3
gt
not
not
if-goto WHILE_END0
push constant 0
pop local 4
push local 0
push constant 16
call Math.divide 2
pop local 6
label WHILE_EXP1
push local 4
push local 2
lt
not
if-goto WHILE_END1
push constant 16384
push local 5
add
push local 6
add
pop local 7
push local 7
push static 0
call Memory.poke 2
pop temp 0
push local 6
push constant 1
add
pop local 6
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP1
label WHILE_END1
push local 3
push constant 1
add
pop local 3
push local 5
push constant 32
add
pop local 5
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawrightRectangle 13
push argument 0
pop local 9
push argument 2
pop local 10
push argument 1
pop local 11
push argument 3
pop local 12
push local 10
push constant 16
call Screen.mod 2
push constant 15
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
goto IF_END0
label IF_FALSE0
push local 10
push local 10
push constant 16
call Screen.mod 2
sub
pop local 1
label IF_END0
push local 1
push constant 16
call Math.divide 2
pop local 6
push constant 32
push local 11
call Math.multiply 2
pop local 5
push local 10
push local 1
sub
push constant 1
add
pop local 2
push local 11
pop local 3
push local 12
push local 11
sub
push constant 1
add
pop local 4
label WHILE_EXP0
push local 3
push local 12
gt
not
not
if-goto WHILE_END0
push constant 16384
push local 5
add
push local 6
add
pop local 8
push local 8
call Memory.peek 1
pop local 7
push static 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 8
push local 7
push local 2
push static 2
add
pop pointer 1
push that 0
or
call Memory.poke 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 8
push local 7
push local 2
push static 2
add
pop pointer 1
push that 0
not
and
call Memory.poke 2
pop temp 0
label IF_END1
push local 5
push constant 32
add
pop local 5
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 7
push argument 2
push constant 2
call Math.divide 2
pop local 6
push local 6
pop local 0
push argument 2
push argument 2
call Math.multiply 2
pop local 1
push argument 2
push constant 181
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
label WHILE_EXP0
push local 0
push argument 2
gt
not
not
if-goto WHILE_END0
push local 0
push local 0
call Math.multiply 2
pop local 3
push local 1
push local 3
sub
call Math.sqrt 1
pop local 2
push argument 1
push local 0
add
pop local 4
push argument 1
push local 0
sub
pop local 5
push argument 0
push local 2
sub
push local 4
push argument 0
push local 2
add
push local 4
call Screen.drawRectangle 4
pop temp 0
push argument 0
push local 2
sub
push local 5
push argument 0
push local 2
add
push local 5
call Screen.drawRectangle 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
push local 6
sub
push argument 1
push local 6
sub
push argument 0
push local 6
add
push argument 1
push local 6
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push local 6
gt
not
not
if-goto WHILE_END1
push local 0
push local 0
call Math.multiply 2
pop local 3
push local 1
push local 3
sub
call Math.sqrt 1
pop local 2
push argument 1
push local 0
add
pop local 4
push argument 1
push local 0
sub
pop local 5
push argument 0
push local 2
sub
push local 4
push argument 0
push local 6
sub
push local 4
call Screen.drawRectangle 4
pop temp 0
push argument 0
push local 2
sub
push local 5
push argument 0
push local 6
sub
push local 5
call Screen.drawRectangle 4
pop temp 0
push argument 0
push local 6
add
push local 4
push argument 0
push local 2
add
push local 4
call Screen.drawRectangle 4
pop temp 0
push argument 0
push local 6
add
push local 5
push argument 0
push local 2
add
push local 5
call Screen.drawRectangle 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function Screen.setVal 1
push argument 0
call Memory.peek 1
pop local 0
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push local 0
push argument 1
or
call Memory.poke 2
pop temp 0
goto IF_END0
label IF_FALSE0
push argument 0
push local 0
push argument 1
not
and
call Memory.poke 2
pop temp 0
label IF_END0
push constant 0
return
function Screen.pos2addr 2
push argument 0
push constant 16
call Math.divide 2
pop local 0
push argument 0
push constant 16
push local 0
call Math.multiply 2
sub
pop local 1
push constant 16384
push constant 32
push argument 1
call Math.multiply 2
add
push local 0
add
return
function Screen.mod 1
push argument 0
push argument 1
call Math.divide 2
pop local 0
push argument 0
push argument 1
push local 0
call Math.multiply 2
sub
return
